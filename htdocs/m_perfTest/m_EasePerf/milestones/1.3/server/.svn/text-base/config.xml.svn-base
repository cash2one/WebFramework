<?xml version="1.0" encoding="UTF-8" ?>
<root>
    <db>
        <!-- your ldap -->
        <ldap>zhangb</ldap>

        <!-- product team -->
        <product>test</product>

        <!-- child product -->
        <type>search</type>
    </db>
    <datas>
        <!-- data 配置说明与限制：
            服务日志：只能配置一个
            jvm日志：可以配置多个
            进程配置： 可以配置多个
         -->
        <data>
            <!-- service name, 为便于区分, 建议为: 机器名_服务名, 如: nb092_ds -->
            <cubename>ds</cubename>

            <!-- 监控时间间隔，默认30s(作用于全局，如果具体项如logfile没有配置，则使用该值) -->
            <timeInterval>30</timeInterval>

            <!-- 服务log文件配置块,可以有多个logfile
                   需要注意：
                       1，不同log文件间，监控的项不能有同名（对于一个监控项而言，将同时包含多个log的数据，数据将不正确）
                       2，接1：监控项配置方面，程序不做这方面检查（如果能确定不同log中不会有相同项，）
                       3，multiKey为ture或者t的时候支持多行；其他和默认情况都是不支持的
             -->
            <logfiles>
                <!-- 单个服务log文件配置块 -->
                <logfile>
                    <!-- 监控时间间隔，默认30s -->
                    <timeInterval>30</timeInterval>
                    <!-- log别名，只用于log，可以不配置，默认是用logfile -->
                    <alias>log_resin</alias>
                    <!-- 是否支持在单行内有多个匹配，默认是不支持(效率考虑) -->
                    <multiKey>false</multiKey>
                    <!-- 数据显示延迟时间：显示数据dataDelayTime之前的数据，默认会使用timeInterval值。
                         如果log中数据timestamp波动比timeInterval大(比如多线程)，建议将给值设置为波动阀值  -->
                    <dataDelayTime></dataDelayTime>
                    <!-- 监控日志, 请写fullPath, 如: /disk2/resin-3.0.21/log/stdout.log.@@%Y-%m-%d@@
                    will replace @@time pattern@@ according to current date if contains "@@" and "@@"
                    pattern见下:
                        %Y :完整年(e.g.: 2013)
                        %y: 年后两位 [00,99]
                        %m: 月份 [01,12]
                        %d: 日期 [01,31]
                        %H: hour-24小时制[00,23]
                        %M: minute [01,59]
                        %S: second [01,59]      -->
                    <logfile>/disk3/zhangb/resin-3.0.21/log/stdout.log.@@%Y-%m-%d@@</logfile>

                    <!-- 待监控的整型key (目前不支持带有","的key), 多个key请用","分隔 -->
                    <numberKeys>handle_request_time</numberKeys>

                    <!-- 待监控的字符型key (目前不支持带有","的key), 多个key请用","分隔 -->
                    <stringKeys></stringKeys>
                </logfile>
            </logfiles>

            <!-- jvm 日志文件(仅对java进程的日志有效), 建议如下配置:
            -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCApplicationConcurrentTime
            1，gcconfigs下可以配置多个gcconfig
            2，每个gcconfig下alias，gclogfile必须配置
            3，可以监控多个jvmlog
                                 注意：
                1，默认使用gcviewer来处理，gcviewer只能同时处理一个jvmlog
                2，如果配置多个jvmlog，使用自己写的jvmlog处理器进行处理
            -->
            <jvmlogs>
                <jvmlog>
                    <!-- 监控时间间隔，默认300s -->
                    <timeInterval>300</timeInterval>
                    <!-- gc信息别名 -->
                    <alias>jvmlog_resin</alias>
                    <!-- gc 日志文件(仅对java进程的日志有效) 文件名同logfile/logfile配置-->
                    <logfile>/disk3/zhangb/resin-3.0.21/log/jvm.log</logfile>
                </jvmlog>
            </jvmlogs>


            <!-- 进程资源监控 (cpu, mem): 若不做监控, 请注释掉 processes块, 说明:
                1. 若要监控多个进程, 可如下配置:
                    1.1 在processes下配多个process
                    1.2 在一个process中指定多个待监控进程, 并在alias中配置多个别名, 用","分隔, 并 (用pid指定时请在pid中配置多个, 用","分隔)
                2. 每个process请至少用pid, processPath, regPattern中的一个来指定:
                    2.1 若使用pid指定, 则regPattern及processPath的配置无效 (不推荐按此配置, 否则服务重启导致pid改变后无法继续监控), 将对pid指定的进程做监控
                    2.2 若仅使用regPattern指定 (在CDATA[]的[]中配置正则表达式), 则会监控命令"ps xu"输出中, command项匹配regPattern的进程
                        例: 进程的command为java -Xmx256m -cp lib/*:build/classes outfox.yinxj.svncheck.LogUpdate, 则可配置为: outfox.*Logupdate
                    2.3 若仅使用processPath (进程的启动路径或父路径) 来指定, 则会监控/proc/${pid}/cwd指向的路径包含processPath的所有pid (不推荐, 因为可能会匹配到多个进程)
                    2.4 (推荐方式) 若regPattern及processPath均指定, 则仅会监控同时满足2.2及2.3条件的进程
                3. 监控条件: 满足监控条件的进程数 = 配置的alias数
                   若不满足监控条件, 则不对进程做监控. 当满足监控条件时, 会继续 (或开始) 做监控
                4, 默认只会监控：进程cpu和内存信息，如果需要监控其他项，请在mItem配置：
                    目前mItem：支持类型有以下几个（适用逗号,开）,执行命令可能有权限问题，处理提则不处理
                        fd: 文件打开个数     命名： ls /proc/pid/fd -1 | wc -l
                        threadNumber: 线程数量，命令：ps -Lf pid | wc -l
                        gcinfo:适用于是java进程，命令： jstat -gcutil 收集gc信息
             -->
            <processes>
                <!-- 监控时间间隔，默认30s -->
                <timeInterval>30</timeInterval>
                 <!-- mItems 监控时间间隔,默认是 进程timeInterval -->
                <mTimeInterval>30</mTimeInterval>
                <!-- 推荐用regPattern及processPath配置 -->
                <process>
                    <alias>pinfo_resin</alias>
                    <regPattern><![CDATA[java.*com.caucho.server.resin.Resin]]></regPattern>
                    <processPath><![CDATA[]]></processPath>
                    <pid></pid>
                    <mItems></mItems>
                </process>
        <!-- resin 配置样例
               <process>
                   <alias>pinfo_resinpl</alias>
                   <regPattern><![CDATA[perl.*com.caucho.server.resin.Resin]]></regPattern>
                   <processPath><![CDATA[]]></processPath>
                   <pid></pid>
                   <mItems></mItems>
               </process>
               <process>
                   <alias>pinfo_resin</alias>
                   <regPattern><![CDATA[java.*com.caucho.server.resin.Resin]]></regPattern>
                   <processPath><![CDATA[]]></processPath>
                   <pid></pid>
                   <mItems></mItems>
               </mItem>
         -->
            </processes>
            <!-- 定时执行命令配置：
                key：名称，默认会加上机器名称：推荐 nb092.fdNum
                type：类型number | string
                timeInterval：命令执行时间间隔，默认30s
                command：需要执行的命令
            说明：
            1，可以配置多个shellcommand：本质调用subprocess.call完成
            -->
            <shellcommands>
        <!-- shellcommand 配置样例
                <shellcommand>
                    <key>fdNum</key>
                    <type>number</type>
                    <timeInterval>30</timeInterval>
                    <command><![CDATA[ls /proc/16437/fd | wc -l]]></command>
                </shellcommand>
         -->
            </shellcommands>
        </data>
    </datas>
    <!-- 监控工具版本：内部使用，请不要修改该值 -->
    <version>2.0</version>
</root>

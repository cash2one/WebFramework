#! 部署odfs测试环i#!
##########################################################
# variablesi#!
##########################################################
$root_dir$ => /disk1/test_guojing/odfs
$code_dir$ => $root_dir$/5.0
$user$     =>  [shell:whoami]
$namenode_host$   => nc003
$port$  =>6080
#$datanode_host1$  => nb403
#$datanode_host2$  => nb404
#$datanode_host3$  => tb037
$install_dir$ => /disk1/test_guojing/ndfs/install
$log_dir$  => $root_dir$/log
$svn_dir$         => https://dev.corp.youdao.com/svn/outfox/odis/odfs/milestone/5.0/
$tmp_subname$     => [shell:svn info --no-auth-cache $svn_dir$ 2>&1|grep "Last Changed Rev"|cut -d' ' -f4]
$install_code_dir$      => $install_dir$/odfs-5.0.$tmp_subname$M
$namenode_dir$    => $root_dir$/namenode
$namenode_bak_dir$    => $root_dir$/namenode_bak
$datanode_dir_disk1$    => $root_dir$/datanode
$datanode_dir_disk2$    => /disk2/test_guojing/odfs/datanode
$datanode_dir_disk3$    => /disk3/test_guojing/odfs/datanode
$property_file_name$  => $code_dir$/default.properties
$service_file$        => $install_code_dir$/conf/service.xml
$odis_file$           => $install_code_dir$/bin/odis
##########################################################
# steps
##########################################################


#==stop_service:
#stop_namenode~1:     run cmd (cd $install_code_dir$; sh bin/stopnn namenode)
{
 step.name:stop_service.stopnamenode
 step.desc:stop namenode
 step.cmd:[shell]:cd $install_code_dir$; sh bin/stopnn namenode
 step.ignore_fail:1
}
#stop_datanode~1:     run cmd (cd $install_code_dir$; sh bin/stopdn datanode)
{
 step.name:stop_service.stopdatanode
 step.desc:stop datanode
 step.cmd:[shell]:cd $install_code_dir$; sh bin/stopdn datanode
 step.ignore_fail:1
}
#==clear_environment:
{
 step.name:clear_env.clear
 step.desc:clear odfs ndfs log data dirctory
 step.cmd:[shell]:rm -rf $root_dir$;rm -rf $install_dir$;rm -rf $log_dir$;rm -rf $namenode_dir$;rm -rf $datanode_dir_disk1$;rm -rf $datanode_dir_disk2$
 step.ignore_fail:1
}
#clear_odfs_root:    run cmd (rm -rf $root_dir$)
#clear_ndfs_run:     run cmd (rm -rf $install_dir$)
#clear_log:          run cmd (rm -rf $log_dir$)
#clear_namenode_data: run cmd (rm -rf $namenode_dir$)
#clear_datanode_data1: run cmd (rm -rf $datanode_dir_disk1$)
#clear_datanode_data2: run cmd (rm -rf $datanode_dir_disk2$)

#==startup-steps: steps for later running
#mkdir_root_dir: mkdir $root_dir$
{
 step.name:init.mkdir
 step.desc: init root_dir
 step.cmd:[shell]:mkdir -p $root_dir$
}

#==depoly_new_service: acb
#into_rootdir:         run cmd (cd $root_dir$)
#checkout_code:        run cmd (cd $root_dir$ ; svn co --no-auth-cache $svn_dir$)
{
 step.name:deploy.checkcode
 step.cmd:[shell]:cd $root_dir$; svn co --no-auth-cache $svn_dir$
}

{
 step.name:deploy.modify_deploy_dir
 step.cmd:[file.update_line_for_match]:$property_file_name$,install.base.dir    = ${build.dir}/install,install.base.dir    =$install_dir$
}
{
 step.name:deploy.install
 step.cmd:[shell]:cd $code_dir$;ant install
}
{
 step.name:deploy.modify_hostport
 step.cmd:[file.update_line_for_match]:$service_file$,<oldproxyhostport>localhost:7080</oldproxyhostport>,<oldproxyhostport>$namenode_host$:$port$</oldproxyhostport>
}

#modify_deploy_dir:    replace (install.base.dir    = ${build.dir}/install) with (install.base.dir=$install_dir$) in file $property_file_name$
#install:              run cmd (cd $code_dir$ ; ant install)
#modify_hostport:      replace (<hostport>localhost:6080</hostport>) with (<hostport>$namenode_host$:6080</hostport>) in file $service_file$
#modify_oldhostport:   replace (<oldproxyhostport>localhost:7080</oldproxyhostport>) with (<oldproxyhostport>$namenode_host$:7080</oldproxyhostport>) in file $service_file$
{
 step.name:deploy.modify_root
 step.cmd:[file.update_line_for_match]:$service_file$,<root>${odis.local}/namenode</root>,<root>$namenode_dir$</root>
}
#modify_root:         replace (<root>${odis.local}/namenode</root>) with (<root>$namenode_dir$</root>) in file $service_file$
{
 step.name:deploy.modify_rootbak
 step.cmd:[file.update_line_for_match]:$service_file$,<backuproot>/global/tmp/odfs/namenode</backuproot>,<backuproot>$namenode_bak_dir$</backuproot>
}
#modify_root_bak:     replace (<backuproot>/global/tmp/odfs/namenode</backuproot>) with (<backuproot>$namenode_bak_dir$</backuproot>) in file $service_file$
{
 step.name:deploy.modify_datanode_dir
 step.cmd:[file.update_line_for_match]:$service_file$;<dirs>${odis.local}/datanode</dirs>;<dirs>$datanode_dir_disk1$,$datanode_dir_disk2$</dirs>
 step.cmd.sep:;
}
#modify_datanode_dir: replace (<dirs>${odis.local}/datanode</dirs>) with (<dirs>$datanode_dir_disk1$,$datanode_dir_disk2$</dirs>) in file $service_file$
{
 step.name:deploy.add_capacity
 step.cmd:[file.insert_after_line]:$service_file$,<capacity.0>0</capacity.0>,<capacity.1>0</capacity.1>
}
#add_capacity:         insert line (<capacity.0>0</capacity.0>) after line contains(<capacity.0>0</capacity.0>) in file $service_file$
{
 step.name:deploy.modify_reserve
 step.cmd:[file.insert_after_line]:$service_file$,<reserve.0>10737418240</reserve.0>,<reserve.1>10737418240</reserve.1>
}
#modify_reserve:       insert line (<reserve.1>10737418240</reserve.1>) after line contains(<reserve.0>10737418240</reserve.0>) in file $service_file$
{
 step.name:deploy.modify_log_dir
 step.cmd:[file.insert_after_line]:$odis_file$,export ODIS_HOME,export ODIS_LOCAL=$log_dir$
}
#modify_log_dir:       insert line (export ODIS_LOCAL=$log_dir$) after line contains(export ODIS_HOME) in file $odis_file$
{
 step.name:deploy.modify_jvm
 step.cmd:[file.update_line_for_match]:$odis_file$,JAVA_HEAP_MAX="-Xmx7000m -Xms7000m",JAVA_HEAP_MAX="-Xmx1000m -Xms1000m"
}
#modify_jvn:           replace (JAVA_HEAP_MAX="-Xmx7000m -Xms7000m") with (JAVA_HEAP_MAX="-Xmx1000m -Xms1000m") in file $odis_file$

#== start service: 
{
 step.name:start.namenode
 step.cmd:[shell]:cd $install_code_dir$; sh bin/startnn namenode
 step.check_before_run:checkmem
}
{
 step.name:start.datanode
 step.cmd:[shell]:cd $install_code_dir$ ; sh bin/startdn datanode
}
{
 check.name:checkmem
 check.cmd:[checkenv.check_mem]:1000000
}

{
 step.name: start.enableserver
 step.cmd:[shell]:odis.sh odfs -fs $namenode_host$:$port$ setsvrready true
}
{
 collect.name:deployodfs
 collect.cmd:stop_service.*, clear_env.*, init.*, deploy.*, start.*
}
{
 collect.name:stopodfs
 collect.cmd:stop_service.*,clear_env.*
}
#start_namenode:       run cmd (cd $install_code_dir$ ; sh bin/startnn namenode)
#start_datanode:       run cmd (cd $install_code_dir$ ; sh bin/startdn datanode)

